{
  value: { @def("Testgroup")
    any: [ @pattern("^(?!req|res|run)([a-z0-9]+)$") @compound("oneOf")
      { @def("Testcase")
        req: {
          url: "",
          method: "get", @schema({enum:["get","post","delete","options","put","head"]})
          query: {
            any: {} @pattern(".*")  @schema({type:"any"})
          },
          params: {
            any: {} @pattern(".*")  @schema({type:"any"})
          },
          headers: {
            any: {} @pattern(".*")  @schema({type:"any"})
          },
          body: { @schema({type:"any"})
          }
        },
        res: {
          status: 200,
          body: {}, @schema({type:"any"})
        },
        run: { @describe("Control test execution")
          skip: "", @describe("Skip the test when eval true")
          delay: 1000, @describe("Run the test case after waiting for a period of time")
          retry: {
            stop: "",  @describe("Whether to stop retry")
            delay: 1000, @describe("Interval between each retry (ms)")
          },
          loop: {
            items: [ @compound("oneOf") @describe("Iter value pass to `$run.item`")
              "",
              [
                "",
              ]
            ],
            delay: 1000, @describe("Interval between each loop (ms)")
          },
          dump: true, @describe("Force print req/res data when true")
        }
      },
      { @ref("Testgroup")
      }
    ]
  },
  annotations: {
    module: "", @describe("Import submodule")
    jslib: "", @describe("Import user-defined functions")
    mixin: "", @describe("Import mixin file")
    client: [ @compound("oneOf")  @describe("Setup client or use client")
      {
        name: "", 
        kind: "", @schema({enum:["http", "echo"]})
        options: {}, @schema({type:"any"})
      },
      "",
    ],
    describe: "", @describe("Give a title")
    group: null, @describe("Mark as case group")
    eval: null, @describe("Use js expr to generate data (in req) and verify data(in res)")
    mock: null, @describe("Use mock function to generate data")
    file: null, @describe("Use a file")
    trans: "", @describe("Transform data")
    every: null, @describe("A set of assertions are passed before the test passes")
    some: null, @describe("If one of a set of assertions passes, the test passes")
    partial: null, @describe("Mark only partial verification instead of congruent verification")
    type: null, @describe("Mark only verifies the type of data")
    optional: null, @describe("Marker field is optional")
    nullable: null, @describe("Marker field can be null")
  }
}