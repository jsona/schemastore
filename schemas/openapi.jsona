{ @jsonaschema("schema")
  value: {
    endpoint: { @pattern(".*") @describe("Define a endpoint")
      route: "POST /login", @describe("Route info")
      req: { @describe("Define request object")
        query: { @describe("Request header object")
          any: { @pattern(".*") @anytype
          }
        },
        params: { @describe("Request path params")
          any: { @pattern(".*") @anytype
          }
        },
        headers: { @describe("Request headers")
          any: { @pattern(".*") @anytype
          }
        },
        body: { @anytype @describe("Request body data")
        }
      },
      res: {
        200: [ @pattern("\\d{3}") @compound("anyOf")
          { @schema({additionalProperties:false})
            headers: { @describe("Response headers")
              any: { @pattern(".*") @anytype
              }
            },
            body: { @describe("Response body data") @anytype
            }
          },
          { @describe("Response body data") @anytype
          }
        ]
      }
    }
  },
  annotations: {
    openapi: { @describe("Global openapi object")
      openapi: "3.0.2",
      servers: [
        {
          url: "/v3"
        }
      ],
      info: {
        title: "A demo api", @describe("The title of the application")
        version: "10.0.0", @describe("The version of the OpenAPI document")
        description: `A demo api`, @describe("A short description of the application. CommonMark syntax MAY be used for rich text representation")
        termsOfService: "http://swagger.io/terms/", @describe("A URL to the Terms of Service for the API")
        contact: { @describe("Contact information for the exposed API")
          name: "API Support",
          url: "http://www.example.com/support",
          email: "support@example.com"
        },
        license: { @describe("License information for the exposed API")
          name: "Apache 2.0", @required
          url: "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        tags: [
          {
            name: "Pet", @required
            description: "Pets operations",
            externalDocs: { @def("ExternalDocs") @describe("Allows referencing an external resource for extended documentation")
              url: "https://example.com", @required
              description: "Find more info here"
            }
          }
        ]
      },
      components: { @describe("Holds a set of reusable objects for different aspects of the OAS")
        securitySchemes: { @describe("An object to hold reusable Security Scheme Objects")
          name: [ @pattern(".*") @compound("oneOf")
            {
              type: "http",
              scheme: "basic"
            },
            {
              type: "apiKey",
              name: "api_key",
              in: "header"
            },
            {
              type: "http",
              scheme: "bearer",
              bearerFormat: "JWT"
            },
            {
              type: "oauth2",
              flows: {
                implicit: { @def("OAuthFlowObject")
                  authorizationUrl: "https://example.com/api/oauth/dialog",
                  tokenUrl: "https://example.com/api/oauth/token",
                  refreshUrl: "https://example.com/api/oauth/refreshToken",
                  scopes: {
                    "write:pets": "modify pets in your account" @pattern(".*")
                  }
                },
                password: {}, @ref("OAuthFlowObject")
                clientCredentials: {}, @ref("OAuthFlowObject")
                authorizationCode: {} @ref("OAuthFlowObject")
              }
            },
            {
              type: "openIdConnect",
              openIdConnectUrl: "https://example.com/api/openIdConnect"
            }
          ]
        }
      },
      security: [ @describe("A declaration of which security mechanisms can be used for this operation")
        {
          jwt: [ @pattern(".*")
            "write:pets"
          ]
        }
      ]
    },
    endpoint: { @describe("Define a endpoint")
      summary: "User login", @describe("An optional, string summary, intended to apply to all operations in this path")
      description: `User login with user and pass`, @describe("An optional, string description, intended to apply to all operations in this path. CommonMark syntax MAY be used for rich text representation")
      tags: [ @describe("A list of tags for API documentation control. Tags can be used for logical grouping of operations by resources or any other qualifier.")
        "user"
      ],
      security: [ @describe("A declaration of which security mechanisms can be used for this operation")
        {
          jwt: [ @pattern(".*")
            "write:pets"
          ]
        }
      ],
      externalDocs: {}, @ref("ExternalDocs")
      extensions: { @describe("Additional data can be added into here to extend the specification at certain points")
        name: { @pattern(".*") @anytype
        }
      },
      deprecated: false @describe("Declares this operation to be deprecated. Consumers SHOULD refrain from usage of the declared operation")
    },
    withHeader: null, @describe("Also describe res headers")
    contentType: "application/xml", @describe("Set content-type")
    schema: { @describe("Use custom schema") @def("Schema")
      type: [ @compound("oneOf")
        "object", @def("SchemaType")
          @schema({
            enum: [
              "array",
              "boolean",
              "integer",
              "null",
              "number",
              "object",
              "string"
            ]
          })
        [
          "object" @ref("SchemaType")
        ]
      ],


      // For number
      maximum: 10,
      minimum: 5,
      exclusiveMaximum: false,
      exclusiveMinimum: false,
      multipleOf: 2.0,

      // For string
      maxLength: 16,
      minLength: 6,
      pattern: "[abc]+",
      format: "uuid",

      // For object
      properties: {
        any: { @pattern(".*")
        }
      },
      maxProperties: 10,
      minProperties: 5,
      required: [
        "key"
      ],
      patternProperties: {
        any: { @pattern(".*")
        }
      },
      additionalProperties: [ @compound("oneOf")
        true,
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      // For array
      items: [ @compound("oneOf")
        {}, @schema({"$ref":"#/$defs/Schema"})
        [
          {} @schema({"$ref":"#/$defs/Schema"})
        ]
      ],
      maxItems: 10,
      minItems: 5,
      uniqueItems: false,
      additionalItems: [ @compound("oneOf")
        true,
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      contains: {}, @schema({"$ref":"#/$defs/Schema"})

      enum: [
        {} @anytype
      ],
      const: { @anytype
      },

      // compound
      not: [
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      allOf: [
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      anyOf: [
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      oneOf: [
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      if: [ @compound("oneOf")
        true,
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      then: [ @compound("oneOf")
        true,
        {} @schema({"$ref":"#/$defs/Schema"})
      ],
      else: [ @compound("oneOf")
        true,
        {} @schema({"$ref":"#/$defs/Schema"})
      ],

      // common
      title: "",
      description: "",
      default: { @schema({})
      },
      examples: [
        {} @anytype
      ],
      readOnly: false,
      writeOnly: false
    },
    describe: "", @describe("Add a description")
    anytype: null, @describe("The type of value can be any")
    optional: null, @describe("Mark a field is optional")
    example: null, @describe("Add example for parameter/mediaType")
    pattern: "", @describe("Declare the key-value is a member of patternProperties other than properties")
    default: null, @describe("Set value as default")
    compound: "anyOf",
      @describe("Declare the array is for compound keywords like anyOf,oneOf,anyOf other than array value")
      @schema({enum:["anyOf","oneOf","allOf"]})
    def: "User", @describe("Def a type which can be reused with @ref")
    ref: "User" @describe("Ref a type which have been defined in @def")
  }
}